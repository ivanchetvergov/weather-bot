# telegram_bot/bot.py

import os
import json
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from confluent_kafka import Producer, Consumer, KafkaException, KafkaError # –£–±–µ–¥–∏—Å—å, —á—Ç–æ KafkaError –∑–¥–µ—Å—å!
import threading
import asyncio
import time # –î–ª—è time.time()

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv() 

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
KAFKA_BROKERS = os.getenv("KAFKA_BROKERS")
KAFKA_COMMANDS_TOPIC = os.getenv("KAFKA_COMMANDS_TOPIC")
KAFKA_RESPONSES_TOPIC = os.getenv("KAFKA_RESPONSES_TOPIC")

if not all([BOT_TOKEN, KAFKA_BROKERS, KAFKA_COMMANDS_TOPIC, KAFKA_RESPONSES_TOPIC]):
    print("error. not all var loaded.")
    exit(1) 

# --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Producer ---
try:
    kafka_producer = Producer({'bootstrap.servers': KAFKA_BROKERS})
    print(f"Kafka Producer connected to {KAFKA_BROKERS}")
except Exception as e:
    print(f"err while connecting Kafka Producer: {e}")
    exit(1)

# --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Consumer –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ ---
kafka_consumer_config = {
    'bootstrap.servers': KAFKA_BROKERS,
    'group.id': 'telegram_bot_response_group', 
    'auto.offset.reset': 'earliest' 
}
try:
    kafka_consumer = Consumer(kafka_consumer_config)
    kafka_consumer.subscribe([KAFKA_RESPONSES_TOPIC])
    print(f"Kafka Consumer subscribed to topic '{KAFKA_RESPONSES_TOPIC}'")
except Exception as e:
    print(f"err while connecting Kafka Consumer: {e}")
    exit(1)

# --- 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram Update –≤ Kafka ---
def send_telegram_update_to_kafka(update_obj: Update):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç Telegram Update –≤ Kafka —Ç–æ–ø–∏–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç user_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = None
    event_type = "unknown"
    kafka_key = "" # –ö–ª—é—á –¥–ª—è Kafka —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if update_obj.message:
        user_id = update_obj.message.from_user.id
        event_type = "telegram_message"
        kafka_key = str(user_id) 
    elif update_obj.callback_query:
        user_id = update_obj.callback_query.from_user.id
        event_type = "telegram_callback_query"
        kafka_key = str(user_id) 

    if user_id is None:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è update. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Kafka.")
        return

    # –ü–æ–ª—É—á–∞–µ–º timestamp —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ.
    message_timestamp = None
    if update_obj.effective_message and update_obj.effective_message.date:
        message_timestamp = int(update_obj.effective_message.date.timestamp())
    elif update_obj.callback_query and update_obj.callback_query.message and update_obj.callback_query.message.date:
        message_timestamp = int(update_obj.callback_query.message.date.timestamp())
    else:
        message_timestamp = int(time.time()) # –ò—Å–ø–æ–ª—å–∑—É–π time.time() –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Kafka
    kafka_payload = {
        "event_type": event_type,
        "timestamp": message_timestamp,
        "source": "telegram_bot",
        "data": update_obj.to_dict() # telebot.Update.to_dict() —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
    }

    try:
        kafka_producer.produce(
            KAFKA_COMMANDS_TOPIC,
            key=kafka_key.encode('utf-8'), 
            value=json.dumps(kafka_payload).encode('utf-8'), 
            callback=delivery_report 
        )
        kafka_producer.poll(0) # <-- –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ç–∏–ø: {event_type}) –≤ Kafka —Ç–æ–ø–∏–∫ '{KAFKA_COMMANDS_TOPIC}'")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka: {e}")

def delivery_report(err, msg):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –¥–æ—Å—Ç–∞–≤–∫–µ Kafka."""
    if err is not None:
        print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Kafka: {err}")
    else:
        # print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ {msg.topic()} [{msg.partition()}] @ {msg.offset()}")
        pass # –ù–µ –ø–µ—á–∞—Ç–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å


# --- 5. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ Kafka (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ) ---
async def kafka_response_listener(application: ApplicationBuilder):
    """
    –°–ª—É—à–∞–µ—Ç —Ç–æ–ø–∏–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    while True:
        try:
            msg = kafka_consumer.poll(timeout=1.0) # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É
            if msg is None:
                await asyncio.sleep(0.1) # –ù–µ–º–Ω–æ–≥–æ –∂–¥–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                continue
            if msg.error():
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞
                if msg.error().code() == KafkaError._PARTITION_EOF: # <-- –ò–°–ü–û–õ–¨–ó–£–ô KafkaError!
                    # –ö–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    continue
                else:
                    print(f"–û—à–∏–±–∫–∞ Kafka Consumer: {msg.error()}")
                    continue

            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            payload = msg.value().decode('utf-8')
            response_data = json.loads(payload)

            telegram_user_id = response_data.get('telegram_user_id')
            message_text = response_data.get('message')
            parse_mode = response_data.get('parse_mode', None) # –ú–æ–∂–µ—Ç –±—ã—Ç—å 'HTML' –∏–ª–∏ 'MarkdownV2'

            if telegram_user_id and message_text:
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ Kafka –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {message_text[:50]}...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API
                try:
                    await application.bot.send_message(
                        chat_id=telegram_user_id,
                        text=message_text,
                        parse_mode=parse_mode # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}: {e}")
            else:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ Kafka: {response_data}")

        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Kafka: {e} | –°–æ–æ–±—â–µ–Ω–∏–µ: {payload}")
        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ Kafka: {e}")
        finally:
            kafka_consumer.commit(asynchronous=True) # –ö–æ–º–º–∏—Ç–∏–º —Å–º–µ—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

# --- 6. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ ---

# –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–±—ç–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
async def handle_all_updates_to_kafka(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ó–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–ï–°–¨ –æ–±—ä–µ–∫—Ç Update –≤ Kafka
    send_telegram_update_to_kafka(update)
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω –∑–Ω–∞–ª, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    if update.message:
        await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    elif update.callback_query:
        await update.callback_query.answer("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç ‚úÖ") # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–±—ç–∫–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka, —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_telegram_update_to_kafka(update)
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ (–Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –±—ç–∫–µ–Ω–¥–∞)
    name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç üå¶. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


# --- 7. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka Response Listener –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_kafka_listener_in_thread(app_instance):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª—É–ø –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            loop.run_until_complete(kafka_response_listener(app_instance))
        except asyncio.CancelledError:
            pass # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
        finally:
            loop.close()

    listener_thread = threading.Thread(target=run_kafka_listener_in_thread, args=(app,))
    listener_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    listener_thread.start()
    print("Kafka Response Listener –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
    app.add_handler(CommandHandler("start", start)) # /start —Ç–æ–∂–µ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ Kafka
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_updates_to_kafka))
    app.add_handler(MessageHandler(filters.COMMAND, handle_all_updates_to_kafka)) # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–¥—É—Ç –≤ Kafka
    app.add_handler(CallbackQueryHandler(handle_all_updates_to_kafka)) # –í—Å–µ –∫–æ–ª–±—ç–∫–∏ –∏–¥—É—Ç –≤ Kafka

    print("Telegram bot –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Kafka.")
    try:
        app.run_polling(poll_interval=1.0) # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ Telegram API
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        # –í–∞–∂–Ω–æ: –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling, –ø–æ—Ç–æ–∫-—Å–ª—É—à–∞—Ç–µ–ª—å Kafka Consumer –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.
        # –ü–æ—Å–∫–æ–ª—å–∫—É –æ–Ω daemon=True, –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
        kafka_consumer.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        print("Kafka Consumer –∑–∞–∫—Ä—ã—Ç.")