# python_bot/handlers.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)

from telegram import Update
from telegram.ext import ContextTypes
import json
import logging

from .kafka_service import send_telegram_update_to_kafka
from .commands import BOT_COMMANDS

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ---
## –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Kafka

async def handle_all_updates_to_kafka(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram –≤ Kafka.
    –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.
    """
    user_id = update.effective_user.id if update.effective_user else 'N/A'
    logger.info(f"Received update from user {user_id}. Sending to Kafka.")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è Kafka.
    # –î–æ–±–∞–≤–ª—è–µ–º 'type' –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
    kafka_message = {
        "type": "telegram_update", # –û–±—â–∏–π —Ç–∏–ø –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
        "data": update.to_dict() # –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
    }
    send_telegram_update_to_kafka(kafka_message) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç

    if update.message:
        await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    elif update.callback_query:
        await update.callback_query.answer("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")

# ---
## –ö–æ–º–∞–Ω–¥–∞ /weather

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /weather.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤ Kafka –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ç–∫–µ–Ω–¥–æ–º.
    """
    user_id = update.effective_user.id if update.effective_user else 'N/A'
    city = " ".join(context.args)

    if not city:
        logger.warning(f"User {user_id} sent /weather without city.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    logger.info(f"User {user_id} requested weather for {city}. Sending to Kafka.")

    # –ó–¥–µ—Å—å –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π "command_weather" —Ç–∏–ø,
    # —Ç–∞–∫ –∫–∞–∫ handle_all_updates_to_kafka —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    # –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã /weather –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ,
    # —Ç–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ handle_all_updates_to_kafka
    # –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å send_telegram_update_to_kafka –Ω–∞–ø—Ä—è–º—É—é,
    # –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ _—Ç–æ–ª—å–∫–æ_ –æ–Ω–∞ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫, —á—Ç–æ handle_all_updates_to_kafka –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç _–≤—Å–µ_.

    # –ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã _—Ç–æ–ª—å–∫–æ_ /weather –æ—Ç–ø—Ä–∞–≤–ª—è–ª "type": "command_weather",
    # —Ç–æ —É–±–µ—Ä–∏ weather_command –∏–∑ `handle_all_updates_to_kafka` –∏ –∏–∑–º–µ–Ω–∏:
    # kafka_message = {
    #     "type": "command_weather",
    #     "data": update.to_dict()
    # }
    # send_telegram_update_to_kafka(kafka_message)

    await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# ---
## –ö–æ–º–∞–Ω–¥–∞ /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–µ –≤ Kafka –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ç–∫–µ–Ω–¥–æ–º.
    """
    user_id = update.effective_user.id if update.effective_user else 'N/A'
    name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
    logger.info(f"User {user_id} sent /start. Sending to Kafka.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ handle_all_updates_to_kafka —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞.
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç üå¶. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# ---
## –ö–æ–º–∞–Ω–¥–∞ /help

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    user_id = update.effective_user.id if update.effective_user else 'N/A'
    logger.info(f"User {user_id} requested /help. Sent command list.")

    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
    for cmd in BOT_COMMANDS:
        help_text += f"/{cmd.command} - {cmd.description}\n"

    await update.message.reply_text(help_text)