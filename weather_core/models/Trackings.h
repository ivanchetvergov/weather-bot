/**
 *
 *  Trackings.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace weather_bot
{

class Trackings
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _user_id;
        static const std::string _city;
        static const std::string _temp_above;
        static const std::string _temp_below;
        static const std::string _rain_expected;
        static const std::string _snow_expected;
        static const std::string _wind_speed_gt;
        static const std::string _wind_speed_lt;
        static const std::string _humidity_gt;
        static const std::string _humidity_lt;
        static const std::string _pressure_gt;
        static const std::string _pressure_lt;
        static const std::string _is_active;
        static const std::string _triggered_at;
        static const std::string _created_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Trackings(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Trackings(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Trackings(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Trackings() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int64_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int64_t &pUserId) noexcept;

    /**  For column city  */
    ///Get the value of the column city, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;
    ///Set the value of the column city
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;

    /**  For column temp_above  */
    ///Get the value of the column temp_above, returns the default value if the column is null
    const double &getValueOfTempAbove() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getTempAbove() const noexcept;
    ///Set the value of the column temp_above
    void setTempAbove(const double &pTempAbove) noexcept;
    void setTempAboveToNull() noexcept;

    /**  For column temp_below  */
    ///Get the value of the column temp_below, returns the default value if the column is null
    const double &getValueOfTempBelow() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getTempBelow() const noexcept;
    ///Set the value of the column temp_below
    void setTempBelow(const double &pTempBelow) noexcept;
    void setTempBelowToNull() noexcept;

    /**  For column rain_expected  */
    ///Get the value of the column rain_expected, returns the default value if the column is null
    const bool &getValueOfRainExpected() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getRainExpected() const noexcept;
    ///Set the value of the column rain_expected
    void setRainExpected(const bool &pRainExpected) noexcept;
    void setRainExpectedToNull() noexcept;

    /**  For column snow_expected  */
    ///Get the value of the column snow_expected, returns the default value if the column is null
    const bool &getValueOfSnowExpected() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getSnowExpected() const noexcept;
    ///Set the value of the column snow_expected
    void setSnowExpected(const bool &pSnowExpected) noexcept;
    void setSnowExpectedToNull() noexcept;

    /**  For column wind_speed_gt  */
    ///Get the value of the column wind_speed_gt, returns the default value if the column is null
    const double &getValueOfWindSpeedGt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getWindSpeedGt() const noexcept;
    ///Set the value of the column wind_speed_gt
    void setWindSpeedGt(const double &pWindSpeedGt) noexcept;
    void setWindSpeedGtToNull() noexcept;

    /**  For column wind_speed_lt  */
    ///Get the value of the column wind_speed_lt, returns the default value if the column is null
    const double &getValueOfWindSpeedLt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getWindSpeedLt() const noexcept;
    ///Set the value of the column wind_speed_lt
    void setWindSpeedLt(const double &pWindSpeedLt) noexcept;
    void setWindSpeedLtToNull() noexcept;

    /**  For column humidity_gt  */
    ///Get the value of the column humidity_gt, returns the default value if the column is null
    const double &getValueOfHumidityGt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getHumidityGt() const noexcept;
    ///Set the value of the column humidity_gt
    void setHumidityGt(const double &pHumidityGt) noexcept;
    void setHumidityGtToNull() noexcept;

    /**  For column humidity_lt  */
    ///Get the value of the column humidity_lt, returns the default value if the column is null
    const double &getValueOfHumidityLt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getHumidityLt() const noexcept;
    ///Set the value of the column humidity_lt
    void setHumidityLt(const double &pHumidityLt) noexcept;
    void setHumidityLtToNull() noexcept;

    /**  For column pressure_gt  */
    ///Get the value of the column pressure_gt, returns the default value if the column is null
    const double &getValueOfPressureGt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getPressureGt() const noexcept;
    ///Set the value of the column pressure_gt
    void setPressureGt(const double &pPressureGt) noexcept;
    void setPressureGtToNull() noexcept;

    /**  For column pressure_lt  */
    ///Get the value of the column pressure_lt, returns the default value if the column is null
    const double &getValueOfPressureLt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getPressureLt() const noexcept;
    ///Set the value of the column pressure_lt
    void setPressureLt(const double &pPressureLt) noexcept;
    void setPressureLtToNull() noexcept;

    /**  For column is_active  */
    ///Get the value of the column is_active, returns the default value if the column is null
    const bool &getValueOfIsActive() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsActive() const noexcept;
    ///Set the value of the column is_active
    void setIsActive(const bool &pIsActive) noexcept;
    void setIsActiveToNull() noexcept;

    /**  For column triggered_at  */
    ///Get the value of the column triggered_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfTriggeredAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTriggeredAt() const noexcept;
    ///Set the value of the column triggered_at
    void setTriggeredAt(const ::trantor::Date &pTriggeredAt) noexcept;
    void setTriggeredAtToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 16;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    std::string toString() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Trackings>;
    friend drogon::orm::BaseBuilder<Trackings, true, true>;
    friend drogon::orm::BaseBuilder<Trackings, true, false>;
    friend drogon::orm::BaseBuilder<Trackings, false, true>;
    friend drogon::orm::BaseBuilder<Trackings, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Trackings>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<int64_t> userId_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<double> tempAbove_;
    std::shared_ptr<double> tempBelow_;
    std::shared_ptr<bool> rainExpected_;
    std::shared_ptr<bool> snowExpected_;
    std::shared_ptr<double> windSpeedGt_;
    std::shared_ptr<double> windSpeedLt_;
    std::shared_ptr<double> humidityGt_;
    std::shared_ptr<double> humidityLt_;
    std::shared_ptr<double> pressureGt_;
    std::shared_ptr<double> pressureLt_;
    std::shared_ptr<bool> isActive_;
    std::shared_ptr<::trantor::Date> triggeredAt_;
    std::shared_ptr<::trantor::Date> createdAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[16]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "city,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "temp_above,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "temp_below,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "rain_expected,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "snow_expected,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "wind_speed_gt,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "wind_speed_lt,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "humidity_gt,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "humidity_lt,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "pressure_gt,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "pressure_lt,";
            ++parametersCount;
        }
        sql += "is_active,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        if(dirtyFlag_[14])
        {
            sql += "triggered_at,";
            ++parametersCount;
        }
        sql += "created_at,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[11])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[12])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[13])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[15])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace weather_bot
} // namespace drogon_model
