/**
 *
 *  Trackings.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Trackings.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::weather_bot;

const std::string Trackings::Cols::_id = "\"id\"";
const std::string Trackings::Cols::_user_id = "\"user_id\"";
const std::string Trackings::Cols::_city = "\"city\"";
const std::string Trackings::Cols::_temp_above = "\"temp_above\"";
const std::string Trackings::Cols::_temp_below = "\"temp_below\"";
const std::string Trackings::Cols::_rain_expected = "\"rain_expected\"";
const std::string Trackings::Cols::_snow_expected = "\"snow_expected\"";
const std::string Trackings::Cols::_wind_speed_gt = "\"wind_speed_gt\"";
const std::string Trackings::Cols::_wind_speed_lt = "\"wind_speed_lt\"";
const std::string Trackings::Cols::_humidity_gt = "\"humidity_gt\"";
const std::string Trackings::Cols::_humidity_lt = "\"humidity_lt\"";
const std::string Trackings::Cols::_pressure_gt = "\"pressure_gt\"";
const std::string Trackings::Cols::_pressure_lt = "\"pressure_lt\"";
const std::string Trackings::Cols::_is_active = "\"is_active\"";
const std::string Trackings::Cols::_triggered_at = "\"triggered_at\"";
const std::string Trackings::Cols::_created_at = "\"created_at\"";
const std::string Trackings::primaryKeyName = "id";
const bool Trackings::hasPrimaryKey = true;
const std::string Trackings::tableName = "\"trackings\"";

const std::vector<typename Trackings::MetaData> Trackings::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int64_t","bigint",8,0,0,1},
{"city","std::string","text",0,0,0,1},
{"temp_above","double","double precision",8,0,0,0},
{"temp_below","double","double precision",8,0,0,0},
{"rain_expected","bool","boolean",1,0,0,0},
{"snow_expected","bool","boolean",1,0,0,0},
{"wind_speed_gt","double","double precision",8,0,0,0},
{"wind_speed_lt","double","double precision",8,0,0,0},
{"humidity_gt","double","double precision",8,0,0,0},
{"humidity_lt","double","double precision",8,0,0,0},
{"pressure_gt","double","double precision",8,0,0,0},
{"pressure_lt","double","double precision",8,0,0,0},
{"is_active","bool","boolean",1,0,0,0},
{"triggered_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Trackings::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Trackings::Trackings(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["city"].isNull())
        {
            city_=std::make_shared<std::string>(r["city"].as<std::string>());
        }
        if(!r["temp_above"].isNull())
        {
            tempAbove_=std::make_shared<double>(r["temp_above"].as<double>());
        }
        if(!r["temp_below"].isNull())
        {
            tempBelow_=std::make_shared<double>(r["temp_below"].as<double>());
        }
        if(!r["rain_expected"].isNull())
        {
            rainExpected_=std::make_shared<bool>(r["rain_expected"].as<bool>());
        }
        if(!r["snow_expected"].isNull())
        {
            snowExpected_=std::make_shared<bool>(r["snow_expected"].as<bool>());
        }
        if(!r["wind_speed_gt"].isNull())
        {
            windSpeedGt_=std::make_shared<double>(r["wind_speed_gt"].as<double>());
        }
        if(!r["wind_speed_lt"].isNull())
        {
            windSpeedLt_=std::make_shared<double>(r["wind_speed_lt"].as<double>());
        }
        if(!r["humidity_gt"].isNull())
        {
            humidityGt_=std::make_shared<double>(r["humidity_gt"].as<double>());
        }
        if(!r["humidity_lt"].isNull())
        {
            humidityLt_=std::make_shared<double>(r["humidity_lt"].as<double>());
        }
        if(!r["pressure_gt"].isNull())
        {
            pressureGt_=std::make_shared<double>(r["pressure_gt"].as<double>());
        }
        if(!r["pressure_lt"].isNull())
        {
            pressureLt_=std::make_shared<double>(r["pressure_lt"].as<double>());
        }
        if(!r["is_active"].isNull())
        {
            isActive_=std::make_shared<bool>(r["is_active"].as<bool>());
        }
        if(!r["triggered_at"].isNull())
        {
            auto timeStr = r["triggered_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            tempAbove_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            tempBelow_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            rainExpected_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            snowExpected_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            windSpeedGt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            windSpeedLt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            humidityGt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            humidityLt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            pressureGt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            pressureLt_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            isActive_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Trackings::Trackings(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tempAbove_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            tempBelow_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            rainExpected_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            snowExpected_=std::make_shared<bool>(pJson[pMasqueradingVector[6]].asBool());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            windSpeedGt_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            windSpeedLt_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            humidityGt_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            humidityLt_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            pressureGt_=std::make_shared<double>(pJson[pMasqueradingVector[11]].asDouble());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            pressureLt_=std::make_shared<double>(pJson[pMasqueradingVector[12]].asDouble());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isActive_=std::make_shared<bool>(pJson[pMasqueradingVector[13]].asBool());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Trackings::Trackings(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("city"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("temp_above"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["temp_above"].isNull())
        {
            tempAbove_=std::make_shared<double>(pJson["temp_above"].asDouble());
        }
    }
    if(pJson.isMember("temp_below"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["temp_below"].isNull())
        {
            tempBelow_=std::make_shared<double>(pJson["temp_below"].asDouble());
        }
    }
    if(pJson.isMember("rain_expected"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["rain_expected"].isNull())
        {
            rainExpected_=std::make_shared<bool>(pJson["rain_expected"].asBool());
        }
    }
    if(pJson.isMember("snow_expected"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["snow_expected"].isNull())
        {
            snowExpected_=std::make_shared<bool>(pJson["snow_expected"].asBool());
        }
    }
    if(pJson.isMember("wind_speed_gt"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["wind_speed_gt"].isNull())
        {
            windSpeedGt_=std::make_shared<double>(pJson["wind_speed_gt"].asDouble());
        }
    }
    if(pJson.isMember("wind_speed_lt"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["wind_speed_lt"].isNull())
        {
            windSpeedLt_=std::make_shared<double>(pJson["wind_speed_lt"].asDouble());
        }
    }
    if(pJson.isMember("humidity_gt"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["humidity_gt"].isNull())
        {
            humidityGt_=std::make_shared<double>(pJson["humidity_gt"].asDouble());
        }
    }
    if(pJson.isMember("humidity_lt"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["humidity_lt"].isNull())
        {
            humidityLt_=std::make_shared<double>(pJson["humidity_lt"].asDouble());
        }
    }
    if(pJson.isMember("pressure_gt"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["pressure_gt"].isNull())
        {
            pressureGt_=std::make_shared<double>(pJson["pressure_gt"].asDouble());
        }
    }
    if(pJson.isMember("pressure_lt"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["pressure_lt"].isNull())
        {
            pressureLt_=std::make_shared<double>(pJson["pressure_lt"].asDouble());
        }
    }
    if(pJson.isMember("is_active"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["is_active"].isNull())
        {
            isActive_=std::make_shared<bool>(pJson["is_active"].asBool());
        }
    }
    if(pJson.isMember("triggered_at"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["triggered_at"].isNull())
        {
            auto timeStr = pJson["triggered_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Trackings::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            tempAbove_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            tempBelow_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            rainExpected_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            snowExpected_=std::make_shared<bool>(pJson[pMasqueradingVector[6]].asBool());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            windSpeedGt_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            windSpeedLt_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            humidityGt_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            humidityLt_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            pressureGt_=std::make_shared<double>(pJson[pMasqueradingVector[11]].asDouble());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            pressureLt_=std::make_shared<double>(pJson[pMasqueradingVector[12]].asDouble());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            isActive_=std::make_shared<bool>(pJson[pMasqueradingVector[13]].asBool());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Trackings::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("city"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("temp_above"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["temp_above"].isNull())
        {
            tempAbove_=std::make_shared<double>(pJson["temp_above"].asDouble());
        }
    }
    if(pJson.isMember("temp_below"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["temp_below"].isNull())
        {
            tempBelow_=std::make_shared<double>(pJson["temp_below"].asDouble());
        }
    }
    if(pJson.isMember("rain_expected"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["rain_expected"].isNull())
        {
            rainExpected_=std::make_shared<bool>(pJson["rain_expected"].asBool());
        }
    }
    if(pJson.isMember("snow_expected"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["snow_expected"].isNull())
        {
            snowExpected_=std::make_shared<bool>(pJson["snow_expected"].asBool());
        }
    }
    if(pJson.isMember("wind_speed_gt"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["wind_speed_gt"].isNull())
        {
            windSpeedGt_=std::make_shared<double>(pJson["wind_speed_gt"].asDouble());
        }
    }
    if(pJson.isMember("wind_speed_lt"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["wind_speed_lt"].isNull())
        {
            windSpeedLt_=std::make_shared<double>(pJson["wind_speed_lt"].asDouble());
        }
    }
    if(pJson.isMember("humidity_gt"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["humidity_gt"].isNull())
        {
            humidityGt_=std::make_shared<double>(pJson["humidity_gt"].asDouble());
        }
    }
    if(pJson.isMember("humidity_lt"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["humidity_lt"].isNull())
        {
            humidityLt_=std::make_shared<double>(pJson["humidity_lt"].asDouble());
        }
    }
    if(pJson.isMember("pressure_gt"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["pressure_gt"].isNull())
        {
            pressureGt_=std::make_shared<double>(pJson["pressure_gt"].asDouble());
        }
    }
    if(pJson.isMember("pressure_lt"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["pressure_lt"].isNull())
        {
            pressureLt_=std::make_shared<double>(pJson["pressure_lt"].asDouble());
        }
    }
    if(pJson.isMember("is_active"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["is_active"].isNull())
        {
            isActive_=std::make_shared<bool>(pJson["is_active"].asBool());
        }
    }
    if(pJson.isMember("triggered_at"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["triggered_at"].isNull())
        {
            auto timeStr = pJson["triggered_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                triggeredAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &Trackings::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Trackings::getId() const noexcept
{
    return id_;
}
void Trackings::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Trackings::PrimaryKeyType & Trackings::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int64_t &Trackings::getValueOfUserId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Trackings::getUserId() const noexcept
{
    return userId_;
}
void Trackings::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[1] = true;
}

const std::string &Trackings::getValueOfCity() const noexcept
{
    static const std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Trackings::getCity() const noexcept
{
    return city_;
}
void Trackings::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[2] = true;
}
void Trackings::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[2] = true;
}

const double &Trackings::getValueOfTempAbove() const noexcept
{
    static const double defaultValue = double();
    if(tempAbove_)
        return *tempAbove_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getTempAbove() const noexcept
{
    return tempAbove_;
}
void Trackings::setTempAbove(const double &pTempAbove) noexcept
{
    tempAbove_ = std::make_shared<double>(pTempAbove);
    dirtyFlag_[3] = true;
}
void Trackings::setTempAboveToNull() noexcept
{
    tempAbove_.reset();
    dirtyFlag_[3] = true;
}

const double &Trackings::getValueOfTempBelow() const noexcept
{
    static const double defaultValue = double();
    if(tempBelow_)
        return *tempBelow_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getTempBelow() const noexcept
{
    return tempBelow_;
}
void Trackings::setTempBelow(const double &pTempBelow) noexcept
{
    tempBelow_ = std::make_shared<double>(pTempBelow);
    dirtyFlag_[4] = true;
}
void Trackings::setTempBelowToNull() noexcept
{
    tempBelow_.reset();
    dirtyFlag_[4] = true;
}

const bool &Trackings::getValueOfRainExpected() const noexcept
{
    static const bool defaultValue = bool();
    if(rainExpected_)
        return *rainExpected_;
    return defaultValue;
}
const std::shared_ptr<bool> &Trackings::getRainExpected() const noexcept
{
    return rainExpected_;
}
void Trackings::setRainExpected(const bool &pRainExpected) noexcept
{
    rainExpected_ = std::make_shared<bool>(pRainExpected);
    dirtyFlag_[5] = true;
}
void Trackings::setRainExpectedToNull() noexcept
{
    rainExpected_.reset();
    dirtyFlag_[5] = true;
}

const bool &Trackings::getValueOfSnowExpected() const noexcept
{
    static const bool defaultValue = bool();
    if(snowExpected_)
        return *snowExpected_;
    return defaultValue;
}
const std::shared_ptr<bool> &Trackings::getSnowExpected() const noexcept
{
    return snowExpected_;
}
void Trackings::setSnowExpected(const bool &pSnowExpected) noexcept
{
    snowExpected_ = std::make_shared<bool>(pSnowExpected);
    dirtyFlag_[6] = true;
}
void Trackings::setSnowExpectedToNull() noexcept
{
    snowExpected_.reset();
    dirtyFlag_[6] = true;
}

const double &Trackings::getValueOfWindSpeedGt() const noexcept
{
    static const double defaultValue = double();
    if(windSpeedGt_)
        return *windSpeedGt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getWindSpeedGt() const noexcept
{
    return windSpeedGt_;
}
void Trackings::setWindSpeedGt(const double &pWindSpeedGt) noexcept
{
    windSpeedGt_ = std::make_shared<double>(pWindSpeedGt);
    dirtyFlag_[7] = true;
}
void Trackings::setWindSpeedGtToNull() noexcept
{
    windSpeedGt_.reset();
    dirtyFlag_[7] = true;
}

const double &Trackings::getValueOfWindSpeedLt() const noexcept
{
    static const double defaultValue = double();
    if(windSpeedLt_)
        return *windSpeedLt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getWindSpeedLt() const noexcept
{
    return windSpeedLt_;
}
void Trackings::setWindSpeedLt(const double &pWindSpeedLt) noexcept
{
    windSpeedLt_ = std::make_shared<double>(pWindSpeedLt);
    dirtyFlag_[8] = true;
}
void Trackings::setWindSpeedLtToNull() noexcept
{
    windSpeedLt_.reset();
    dirtyFlag_[8] = true;
}

const double &Trackings::getValueOfHumidityGt() const noexcept
{
    static const double defaultValue = double();
    if(humidityGt_)
        return *humidityGt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getHumidityGt() const noexcept
{
    return humidityGt_;
}
void Trackings::setHumidityGt(const double &pHumidityGt) noexcept
{
    humidityGt_ = std::make_shared<double>(pHumidityGt);
    dirtyFlag_[9] = true;
}
void Trackings::setHumidityGtToNull() noexcept
{
    humidityGt_.reset();
    dirtyFlag_[9] = true;
}

const double &Trackings::getValueOfHumidityLt() const noexcept
{
    static const double defaultValue = double();
    if(humidityLt_)
        return *humidityLt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getHumidityLt() const noexcept
{
    return humidityLt_;
}
void Trackings::setHumidityLt(const double &pHumidityLt) noexcept
{
    humidityLt_ = std::make_shared<double>(pHumidityLt);
    dirtyFlag_[10] = true;
}
void Trackings::setHumidityLtToNull() noexcept
{
    humidityLt_.reset();
    dirtyFlag_[10] = true;
}

const double &Trackings::getValueOfPressureGt() const noexcept
{
    static const double defaultValue = double();
    if(pressureGt_)
        return *pressureGt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getPressureGt() const noexcept
{
    return pressureGt_;
}
void Trackings::setPressureGt(const double &pPressureGt) noexcept
{
    pressureGt_ = std::make_shared<double>(pPressureGt);
    dirtyFlag_[11] = true;
}
void Trackings::setPressureGtToNull() noexcept
{
    pressureGt_.reset();
    dirtyFlag_[11] = true;
}

const double &Trackings::getValueOfPressureLt() const noexcept
{
    static const double defaultValue = double();
    if(pressureLt_)
        return *pressureLt_;
    return defaultValue;
}
const std::shared_ptr<double> &Trackings::getPressureLt() const noexcept
{
    return pressureLt_;
}
void Trackings::setPressureLt(const double &pPressureLt) noexcept
{
    pressureLt_ = std::make_shared<double>(pPressureLt);
    dirtyFlag_[12] = true;
}
void Trackings::setPressureLtToNull() noexcept
{
    pressureLt_.reset();
    dirtyFlag_[12] = true;
}

const bool &Trackings::getValueOfIsActive() const noexcept
{
    static const bool defaultValue = bool();
    if(isActive_)
        return *isActive_;
    return defaultValue;
}
const std::shared_ptr<bool> &Trackings::getIsActive() const noexcept
{
    return isActive_;
}
void Trackings::setIsActive(const bool &pIsActive) noexcept
{
    isActive_ = std::make_shared<bool>(pIsActive);
    dirtyFlag_[13] = true;
}
void Trackings::setIsActiveToNull() noexcept
{
    isActive_.reset();
    dirtyFlag_[13] = true;
}

const ::trantor::Date &Trackings::getValueOfTriggeredAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(triggeredAt_)
        return *triggeredAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Trackings::getTriggeredAt() const noexcept
{
    return triggeredAt_;
}
void Trackings::setTriggeredAt(const ::trantor::Date &pTriggeredAt) noexcept
{
    triggeredAt_ = std::make_shared<::trantor::Date>(pTriggeredAt);
    dirtyFlag_[14] = true;
}
void Trackings::setTriggeredAtToNull() noexcept
{
    triggeredAt_.reset();
    dirtyFlag_[14] = true;
}

const ::trantor::Date &Trackings::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Trackings::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Trackings::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[15] = true;
}
void Trackings::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[15] = true;
}

void Trackings::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Trackings::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "city",
        "temp_above",
        "temp_below",
        "rain_expected",
        "snow_expected",
        "wind_speed_gt",
        "wind_speed_lt",
        "humidity_gt",
        "humidity_lt",
        "pressure_gt",
        "pressure_lt",
        "is_active",
        "triggered_at",
        "created_at"
    };
    return inCols;
}

void Trackings::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTempAbove())
        {
            binder << getValueOfTempAbove();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTempBelow())
        {
            binder << getValueOfTempBelow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRainExpected())
        {
            binder << getValueOfRainExpected();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSnowExpected())
        {
            binder << getValueOfSnowExpected();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getWindSpeedGt())
        {
            binder << getValueOfWindSpeedGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getWindSpeedLt())
        {
            binder << getValueOfWindSpeedLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getHumidityGt())
        {
            binder << getValueOfHumidityGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getHumidityLt())
        {
            binder << getValueOfHumidityLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPressureGt())
        {
            binder << getValueOfPressureGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPressureLt())
        {
            binder << getValueOfPressureLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsActive())
        {
            binder << getValueOfIsActive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getTriggeredAt())
        {
            binder << getValueOfTriggeredAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Trackings::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void Trackings::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTempAbove())
        {
            binder << getValueOfTempAbove();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTempBelow())
        {
            binder << getValueOfTempBelow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRainExpected())
        {
            binder << getValueOfRainExpected();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSnowExpected())
        {
            binder << getValueOfSnowExpected();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getWindSpeedGt())
        {
            binder << getValueOfWindSpeedGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getWindSpeedLt())
        {
            binder << getValueOfWindSpeedLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getHumidityGt())
        {
            binder << getValueOfHumidityGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getHumidityLt())
        {
            binder << getValueOfHumidityLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPressureGt())
        {
            binder << getValueOfPressureGt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPressureLt())
        {
            binder << getValueOfPressureLt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getIsActive())
        {
            binder << getValueOfIsActive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getTriggeredAt())
        {
            binder << getValueOfTriggeredAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Trackings::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getTempAbove())
    {
        ret["temp_above"]=getValueOfTempAbove();
    }
    else
    {
        ret["temp_above"]=Json::Value();
    }
    if(getTempBelow())
    {
        ret["temp_below"]=getValueOfTempBelow();
    }
    else
    {
        ret["temp_below"]=Json::Value();
    }
    if(getRainExpected())
    {
        ret["rain_expected"]=getValueOfRainExpected();
    }
    else
    {
        ret["rain_expected"]=Json::Value();
    }
    if(getSnowExpected())
    {
        ret["snow_expected"]=getValueOfSnowExpected();
    }
    else
    {
        ret["snow_expected"]=Json::Value();
    }
    if(getWindSpeedGt())
    {
        ret["wind_speed_gt"]=getValueOfWindSpeedGt();
    }
    else
    {
        ret["wind_speed_gt"]=Json::Value();
    }
    if(getWindSpeedLt())
    {
        ret["wind_speed_lt"]=getValueOfWindSpeedLt();
    }
    else
    {
        ret["wind_speed_lt"]=Json::Value();
    }
    if(getHumidityGt())
    {
        ret["humidity_gt"]=getValueOfHumidityGt();
    }
    else
    {
        ret["humidity_gt"]=Json::Value();
    }
    if(getHumidityLt())
    {
        ret["humidity_lt"]=getValueOfHumidityLt();
    }
    else
    {
        ret["humidity_lt"]=Json::Value();
    }
    if(getPressureGt())
    {
        ret["pressure_gt"]=getValueOfPressureGt();
    }
    else
    {
        ret["pressure_gt"]=Json::Value();
    }
    if(getPressureLt())
    {
        ret["pressure_lt"]=getValueOfPressureLt();
    }
    else
    {
        ret["pressure_lt"]=Json::Value();
    }
    if(getIsActive())
    {
        ret["is_active"]=getValueOfIsActive();
    }
    else
    {
        ret["is_active"]=Json::Value();
    }
    if(getTriggeredAt())
    {
        ret["triggered_at"]=getTriggeredAt()->toDbStringLocal();
    }
    else
    {
        ret["triggered_at"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

std::string Trackings::toString() const
{
    return toJson().toStyledString();
}

Json::Value Trackings::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[2]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTempAbove())
            {
                ret[pMasqueradingVector[3]]=getValueOfTempAbove();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTempBelow())
            {
                ret[pMasqueradingVector[4]]=getValueOfTempBelow();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRainExpected())
            {
                ret[pMasqueradingVector[5]]=getValueOfRainExpected();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSnowExpected())
            {
                ret[pMasqueradingVector[6]]=getValueOfSnowExpected();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getWindSpeedGt())
            {
                ret[pMasqueradingVector[7]]=getValueOfWindSpeedGt();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getWindSpeedLt())
            {
                ret[pMasqueradingVector[8]]=getValueOfWindSpeedLt();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getHumidityGt())
            {
                ret[pMasqueradingVector[9]]=getValueOfHumidityGt();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getHumidityLt())
            {
                ret[pMasqueradingVector[10]]=getValueOfHumidityLt();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getPressureGt())
            {
                ret[pMasqueradingVector[11]]=getValueOfPressureGt();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPressureLt())
            {
                ret[pMasqueradingVector[12]]=getValueOfPressureLt();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getIsActive())
            {
                ret[pMasqueradingVector[13]]=getValueOfIsActive();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getTriggeredAt())
            {
                ret[pMasqueradingVector[14]]=getTriggeredAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[15]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getTempAbove())
    {
        ret["temp_above"]=getValueOfTempAbove();
    }
    else
    {
        ret["temp_above"]=Json::Value();
    }
    if(getTempBelow())
    {
        ret["temp_below"]=getValueOfTempBelow();
    }
    else
    {
        ret["temp_below"]=Json::Value();
    }
    if(getRainExpected())
    {
        ret["rain_expected"]=getValueOfRainExpected();
    }
    else
    {
        ret["rain_expected"]=Json::Value();
    }
    if(getSnowExpected())
    {
        ret["snow_expected"]=getValueOfSnowExpected();
    }
    else
    {
        ret["snow_expected"]=Json::Value();
    }
    if(getWindSpeedGt())
    {
        ret["wind_speed_gt"]=getValueOfWindSpeedGt();
    }
    else
    {
        ret["wind_speed_gt"]=Json::Value();
    }
    if(getWindSpeedLt())
    {
        ret["wind_speed_lt"]=getValueOfWindSpeedLt();
    }
    else
    {
        ret["wind_speed_lt"]=Json::Value();
    }
    if(getHumidityGt())
    {
        ret["humidity_gt"]=getValueOfHumidityGt();
    }
    else
    {
        ret["humidity_gt"]=Json::Value();
    }
    if(getHumidityLt())
    {
        ret["humidity_lt"]=getValueOfHumidityLt();
    }
    else
    {
        ret["humidity_lt"]=Json::Value();
    }
    if(getPressureGt())
    {
        ret["pressure_gt"]=getValueOfPressureGt();
    }
    else
    {
        ret["pressure_gt"]=Json::Value();
    }
    if(getPressureLt())
    {
        ret["pressure_lt"]=getValueOfPressureLt();
    }
    else
    {
        ret["pressure_lt"]=Json::Value();
    }
    if(getIsActive())
    {
        ret["is_active"]=getValueOfIsActive();
    }
    else
    {
        ret["is_active"]=Json::Value();
    }
    if(getTriggeredAt())
    {
        ret["triggered_at"]=getTriggeredAt()->toDbStringLocal();
    }
    else
    {
        ret["triggered_at"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

bool Trackings::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(2, "city", pJson["city"], err, true))
            return false;
    }
    else
    {
        err="The city column cannot be null";
        return false;
    }
    if(pJson.isMember("temp_above"))
    {
        if(!validJsonOfField(3, "temp_above", pJson["temp_above"], err, true))
            return false;
    }
    if(pJson.isMember("temp_below"))
    {
        if(!validJsonOfField(4, "temp_below", pJson["temp_below"], err, true))
            return false;
    }
    if(pJson.isMember("rain_expected"))
    {
        if(!validJsonOfField(5, "rain_expected", pJson["rain_expected"], err, true))
            return false;
    }
    if(pJson.isMember("snow_expected"))
    {
        if(!validJsonOfField(6, "snow_expected", pJson["snow_expected"], err, true))
            return false;
    }
    if(pJson.isMember("wind_speed_gt"))
    {
        if(!validJsonOfField(7, "wind_speed_gt", pJson["wind_speed_gt"], err, true))
            return false;
    }
    if(pJson.isMember("wind_speed_lt"))
    {
        if(!validJsonOfField(8, "wind_speed_lt", pJson["wind_speed_lt"], err, true))
            return false;
    }
    if(pJson.isMember("humidity_gt"))
    {
        if(!validJsonOfField(9, "humidity_gt", pJson["humidity_gt"], err, true))
            return false;
    }
    if(pJson.isMember("humidity_lt"))
    {
        if(!validJsonOfField(10, "humidity_lt", pJson["humidity_lt"], err, true))
            return false;
    }
    if(pJson.isMember("pressure_gt"))
    {
        if(!validJsonOfField(11, "pressure_gt", pJson["pressure_gt"], err, true))
            return false;
    }
    if(pJson.isMember("pressure_lt"))
    {
        if(!validJsonOfField(12, "pressure_lt", pJson["pressure_lt"], err, true))
            return false;
    }
    if(pJson.isMember("is_active"))
    {
        if(!validJsonOfField(13, "is_active", pJson["is_active"], err, true))
            return false;
    }
    if(pJson.isMember("triggered_at"))
    {
        if(!validJsonOfField(14, "triggered_at", pJson["triggered_at"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, true))
            return false;
    }
    return true;
}
bool Trackings::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Trackings::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(2, "city", pJson["city"], err, false))
            return false;
    }
    if(pJson.isMember("temp_above"))
    {
        if(!validJsonOfField(3, "temp_above", pJson["temp_above"], err, false))
            return false;
    }
    if(pJson.isMember("temp_below"))
    {
        if(!validJsonOfField(4, "temp_below", pJson["temp_below"], err, false))
            return false;
    }
    if(pJson.isMember("rain_expected"))
    {
        if(!validJsonOfField(5, "rain_expected", pJson["rain_expected"], err, false))
            return false;
    }
    if(pJson.isMember("snow_expected"))
    {
        if(!validJsonOfField(6, "snow_expected", pJson["snow_expected"], err, false))
            return false;
    }
    if(pJson.isMember("wind_speed_gt"))
    {
        if(!validJsonOfField(7, "wind_speed_gt", pJson["wind_speed_gt"], err, false))
            return false;
    }
    if(pJson.isMember("wind_speed_lt"))
    {
        if(!validJsonOfField(8, "wind_speed_lt", pJson["wind_speed_lt"], err, false))
            return false;
    }
    if(pJson.isMember("humidity_gt"))
    {
        if(!validJsonOfField(9, "humidity_gt", pJson["humidity_gt"], err, false))
            return false;
    }
    if(pJson.isMember("humidity_lt"))
    {
        if(!validJsonOfField(10, "humidity_lt", pJson["humidity_lt"], err, false))
            return false;
    }
    if(pJson.isMember("pressure_gt"))
    {
        if(!validJsonOfField(11, "pressure_gt", pJson["pressure_gt"], err, false))
            return false;
    }
    if(pJson.isMember("pressure_lt"))
    {
        if(!validJsonOfField(12, "pressure_lt", pJson["pressure_lt"], err, false))
            return false;
    }
    if(pJson.isMember("is_active"))
    {
        if(!validJsonOfField(13, "is_active", pJson["is_active"], err, false))
            return false;
    }
    if(pJson.isMember("triggered_at"))
    {
        if(!validJsonOfField(14, "triggered_at", pJson["triggered_at"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, false))
            return false;
    }
    return true;
}
bool Trackings::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Trackings::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
