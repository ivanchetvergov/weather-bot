/**
 *
 *  WeatherCache.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WeatherCache.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::weather_bot;

const std::string WeatherCache::Cols::_city = "\"city\"";
const std::string WeatherCache::Cols::_timestamp = "\"timestamp\"";
const std::string WeatherCache::Cols::_json_data = "\"json_data\"";
const std::string WeatherCache::primaryKeyName = "city";
const bool WeatherCache::hasPrimaryKey = true;
const std::string WeatherCache::tableName = "\"weather_cache\"";

const std::vector<typename WeatherCache::MetaData> WeatherCache::metaData_={
{"city","std::string","text",0,0,1,1},
{"timestamp","::trantor::Date","timestamp without time zone",0,0,0,1},
{"json_data","std::string","jsonb",0,0,0,1}
};
const std::string &WeatherCache::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
WeatherCache::WeatherCache(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["city"].isNull())
        {
            city_=std::make_shared<std::string>(r["city"].as<std::string>());
        }
        if(!r["timestamp"].isNull())
        {
            auto timeStr = r["timestamp"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["json_data"].isNull())
        {
            jsonData_=std::make_shared<std::string>(r["json_data"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            jsonData_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

WeatherCache::WeatherCache(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jsonData_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

WeatherCache::WeatherCache(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("city"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("timestamp"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["timestamp"].isNull())
        {
            auto timeStr = pJson["timestamp"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("json_data"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["json_data"].isNull())
        {
            jsonData_=std::make_shared<std::string>(pJson["json_data"].asString());
        }
    }
}

void WeatherCache::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            jsonData_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void WeatherCache::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("city"))
    {
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("timestamp"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["timestamp"].isNull())
        {
            auto timeStr = pJson["timestamp"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                timestamp_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("json_data"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["json_data"].isNull())
        {
            jsonData_=std::make_shared<std::string>(pJson["json_data"].asString());
        }
    }
}

const std::string &WeatherCache::getValueOfCity() const noexcept
{
    static const std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &WeatherCache::getCity() const noexcept
{
    return city_;
}
void WeatherCache::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[0] = true;
}
void WeatherCache::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[0] = true;
}
const typename WeatherCache::PrimaryKeyType & WeatherCache::getPrimaryKey() const
{
    assert(city_);
    return *city_;
}

const ::trantor::Date &WeatherCache::getValueOfTimestamp() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(timestamp_)
        return *timestamp_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WeatherCache::getTimestamp() const noexcept
{
    return timestamp_;
}
void WeatherCache::setTimestamp(const ::trantor::Date &pTimestamp) noexcept
{
    timestamp_ = std::make_shared<::trantor::Date>(pTimestamp);
    dirtyFlag_[1] = true;
}

const std::string &WeatherCache::getValueOfJsonData() const noexcept
{
    static const std::string defaultValue = std::string();
    if(jsonData_)
        return *jsonData_;
    return defaultValue;
}
const std::shared_ptr<std::string> &WeatherCache::getJsonData() const noexcept
{
    return jsonData_;
}
void WeatherCache::setJsonData(const std::string &pJsonData) noexcept
{
    jsonData_ = std::make_shared<std::string>(pJsonData);
    dirtyFlag_[2] = true;
}
void WeatherCache::setJsonData(std::string &&pJsonData) noexcept
{
    jsonData_ = std::make_shared<std::string>(std::move(pJsonData));
    dirtyFlag_[2] = true;
}

void WeatherCache::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WeatherCache::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "city",
        "timestamp",
        "json_data"
    };
    return inCols;
}

void WeatherCache::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJsonData())
        {
            binder << getValueOfJsonData();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> WeatherCache::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void WeatherCache::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTimestamp())
        {
            binder << getValueOfTimestamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getJsonData())
        {
            binder << getValueOfJsonData();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WeatherCache::toJson() const
{
    Json::Value ret;
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getTimestamp())
    {
        ret["timestamp"]=getTimestamp()->toDbStringLocal();
    }
    else
    {
        ret["timestamp"]=Json::Value();
    }
    if(getJsonData())
    {
        ret["json_data"]=getValueOfJsonData();
    }
    else
    {
        ret["json_data"]=Json::Value();
    }
    return ret;
}

std::string WeatherCache::toString() const
{
    return toJson().toStyledString();
}

Json::Value WeatherCache::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[0]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTimestamp())
            {
                ret[pMasqueradingVector[1]]=getTimestamp()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getJsonData())
            {
                ret[pMasqueradingVector[2]]=getValueOfJsonData();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getTimestamp())
    {
        ret["timestamp"]=getTimestamp()->toDbStringLocal();
    }
    else
    {
        ret["timestamp"]=Json::Value();
    }
    if(getJsonData())
    {
        ret["json_data"]=getValueOfJsonData();
    }
    else
    {
        ret["json_data"]=Json::Value();
    }
    return ret;
}

bool WeatherCache::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(0, "city", pJson["city"], err, true))
            return false;
    }
    else
    {
        err="The city column cannot be null";
        return false;
    }
    if(pJson.isMember("timestamp"))
    {
        if(!validJsonOfField(1, "timestamp", pJson["timestamp"], err, true))
            return false;
    }
    else
    {
        err="The timestamp column cannot be null";
        return false;
    }
    if(pJson.isMember("json_data"))
    {
        if(!validJsonOfField(2, "json_data", pJson["json_data"], err, true))
            return false;
    }
    else
    {
        err="The json_data column cannot be null";
        return false;
    }
    return true;
}
bool WeatherCache::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool WeatherCache::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(0, "city", pJson["city"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("timestamp"))
    {
        if(!validJsonOfField(1, "timestamp", pJson["timestamp"], err, false))
            return false;
    }
    if(pJson.isMember("json_data"))
    {
        if(!validJsonOfField(2, "json_data", pJson["json_data"], err, false))
            return false;
    }
    return true;
}
bool WeatherCache::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool WeatherCache::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
