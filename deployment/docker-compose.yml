services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  broker:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper

  kafka-ui:
      image: provectuslabs/kafka-ui:latest # Используем последний образ Kafka UI
      container_name: kafka-ui
      ports:
        - "8080:8080" # UI будет доступен на localhost:8080
      environment:
        KAFKA_CLUSTERS_0_NAME: local-kafka # Имя твоего кластера в UI
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092 # Адрес Kafka брокера внутри Docker сети
        # Если у тебя есть Zookeeper, можно добавить:
        KAFKA_CLUSTERS_0_ZOOKEEPERCONNECT: zookeeper:2181
        # Отключаем создание топиков для новых кластеров (можно включить, если нужно)
        KAFKA_CLUSTERS_0_TOPICSTOCREATE: ""
      depends_on:
        - broker # Kafka UI зависит от запущенного брокера

# Добавляем PostgreSQL
  db:
    image: postgres:14-alpine # Используем Alpine-версию для меньшего размера
    hostname: postgres_db
    container_name: postgres_db
    ports:
      - "5432:5432" # Стандартный порт PostgreSQL
    environment:
      POSTGRES_DB: weather_bot
      POSTGRES_USER: ivan
      POSTGRES_PASSWORD: 1234
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ivan -d weather_bot"] 
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Сохраняем данные, чтобы они не терялись при перезапуске
      - ./sql:/docker-entrypoint-initdb.d/
  # Добавляем PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    hostname: pgadmin
    container_name: pgadmin
    ports:
      - "8081:80" # Доступ к PgAdmin по порту 8081
    environment:
      PGADMIN_DEFAULT_EMAIL: ivar5165885@gmail.com # Email для входа
      PGADMIN_DEFAULT_PASSWORD: Ivan2005 # Пароль для входа
    depends_on:
      db:
        condition: service_healthy # Запускаем PgAdmin только после того, как БД готова

volumes:
  postgres_data:
